<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\TSU_V1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\TSU_V1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Jan 16 09:51:33 2019
<BR><P>
<H3>Maximum Stack Usage =        196 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
LPI2C0_Slave_IRQHandler &rArr; LPI2C_DRV_SlaveIRQHandler &rArr; LPI2C_DRV_SlaveHandleAddressValidEvent &rArr; LPI2C_DRV_SlaveStartDmaTransfer &rArr; LPI2C_DRV_ConfigureDmaTransfer &rArr; EDMA_DRV_ConfigMultiBlockTransfer &rArr; EDMA_DRV_ConfigSingleBlockTransfer &rArr; EDMA_TCDSetAttribute
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">NMI_Handler</a><BR>
 <LI><a href="#[8]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">HardFault_Handler</a><BR>
 <LI><a href="#[9]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">MemManage_Handler</a><BR>
 <LI><a href="#[a]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">BusFault_Handler</a><BR>
 <LI><a href="#[b]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">UsageFault_Handler</a><BR>
 <LI><a href="#[c]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SVC_Handler</a><BR>
 <LI><a href="#[d]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">DebugMon_Handler</a><BR>
 <LI><a href="#[e]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">PendSV_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[37]">ADC0_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[38]">ADC1_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[a]">BusFault_Handler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[5f]">CAN0_Error_IRQHandler</a> from flexcan_irq.o(i.CAN0_Error_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[61]">CAN0_ORed_0_15_MB_IRQHandler</a> from flexcan_irq.o(i.CAN0_ORed_0_15_MB_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[62]">CAN0_ORed_16_31_MB_IRQHandler</a> from flexcan_irq.o(i.CAN0_ORed_16_31_MB_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[5e]">CAN0_ORed_IRQHandler</a> from flexcan_irq.o(i.CAN0_ORed_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[60]">CAN0_Wake_Up_IRQHandler</a> from flexcan_irq.o(i.CAN0_Wake_Up_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[66]">CAN1_Error_IRQHandler</a> from flexcan_irq.o(i.CAN1_Error_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[68]">CAN1_ORed_0_15_MB_IRQHandler</a> from flexcan_irq.o(i.CAN1_ORed_0_15_MB_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[65]">CAN1_ORed_IRQHandler</a> from flexcan_irq.o(i.CAN1_ORed_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[6d]">CAN2_Error_IRQHandler</a> from flexcan_irq.o(i.CAN2_Error_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[6f]">CAN2_ORed_0_15_MB_IRQHandler</a> from flexcan_irq.o(i.CAN2_ORed_0_15_MB_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[6c]">CAN2_ORed_IRQHandler</a> from flexcan_irq.o(i.CAN2_ORed_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[39]">CMP0_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[10]">DMA0_IRQHandler</a> from edma_irq.o(i.DMA0_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[1a]">DMA10_IRQHandler</a> from edma_irq.o(i.DMA10_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[1b]">DMA11_IRQHandler</a> from edma_irq.o(i.DMA11_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[1c]">DMA12_IRQHandler</a> from edma_irq.o(i.DMA12_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[1d]">DMA13_IRQHandler</a> from edma_irq.o(i.DMA13_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[1e]">DMA14_IRQHandler</a> from edma_irq.o(i.DMA14_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[1f]">DMA15_IRQHandler</a> from edma_irq.o(i.DMA15_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[11]">DMA1_IRQHandler</a> from edma_irq.o(i.DMA1_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[12]">DMA2_IRQHandler</a> from edma_irq.o(i.DMA2_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[13]">DMA3_IRQHandler</a> from edma_irq.o(i.DMA3_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[14]">DMA4_IRQHandler</a> from edma_irq.o(i.DMA4_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[15]">DMA5_IRQHandler</a> from edma_irq.o(i.DMA5_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[16]">DMA6_IRQHandler</a> from edma_irq.o(i.DMA6_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[17]">DMA7_IRQHandler</a> from edma_irq.o(i.DMA7_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[18]">DMA8_IRQHandler</a> from edma_irq.o(i.DMA8_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[19]">DMA9_IRQHandler</a> from edma_irq.o(i.DMA9_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[20]">DMA_Error_IRQHandler</a> from edma_irq.o(i.DMA_Error_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[d]">DebugMon_Handler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[8b]">DefaultISR</a> from startup_s32k144.o(.text) referenced 116 times from startup_s32k144.o(RESET)
 <LI><a href="#[3d]">ERM_double_fault_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[3c]">ERM_single_fault_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[55]">FLEXIO_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[25]">FTFC_Fault_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[22]">FTFC_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[73]">FTM0_Ch0_Ch1_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[74]">FTM0_Ch2_Ch3_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[75]">FTM0_Ch4_Ch5_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[76]">FTM0_Ch6_Ch7_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[77]">FTM0_Fault_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[78]">FTM0_Ovf_Reload_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[79]">FTM1_Ch0_Ch1_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[7a]">FTM1_Ch2_Ch3_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[7b]">FTM1_Ch4_Ch5_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[7c]">FTM1_Ch6_Ch7_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[7d]">FTM1_Fault_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[7e]">FTM1_Ovf_Reload_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[7f]">FTM2_Ch0_Ch1_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[80]">FTM2_Ch2_Ch3_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[81]">FTM2_Ch4_Ch5_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[82]">FTM2_Ch6_Ch7_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[83]">FTM2_Fault_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[84]">FTM2_Ovf_Reload_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[85]">FTM3_Ch0_Ch1_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[86]">FTM3_Ch2_Ch3_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[87]">FTM3_Ch4_Ch5_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[88]">FTM3_Ch6_Ch7_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[89]">FTM3_Fault_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[8a]">FTM3_Ovf_Reload_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[8]">HardFault_Handler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[28]">LPI2C0_Master_IRQHandler</a> from lpi2c_irq.o(i.LPI2C0_Master_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[29]">LPI2C0_Slave_IRQHandler</a> from lpi2c_irq.o(i.LPI2C0_Slave_IRQHandler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[40]">LPIT0_Ch0_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[41]">LPIT0_Ch1_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[42]">LPIT0_Ch2_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[43]">LPIT0_Ch3_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[2a]">LPSPI0_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[2b]">LPSPI1_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[2c]">LPSPI2_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[4a]">LPTMR0_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[2f]">LPUART0_RxTx_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[31]">LPUART1_RxTx_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[33]">LPUART2_RxTx_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[24]">LVD_LVW_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[21]">MCM_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[9]">MemManage_Handler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[44]">PDB0_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[54]">PDB1_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[4b]">PORTA_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[4c]">PORTB_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[4d]">PORTC_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[4e]">PORTD_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[4f]">PORTE_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[e]">PendSV_Handler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[27]">RCM_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[3e]">RTC_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[3f]">RTC_Seconds_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[23]">Read_Collision_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[64]">Reserved100_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[67]">Reserved103_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[69]">Reserved105_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[6a]">Reserved106_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[6b]">Reserved107_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[6e]">Reserved110_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[70]">Reserved112_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[71]">Reserved113_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[72]">Reserved114_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[2d]">Reserved45_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[2e]">Reserved46_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[30]">Reserved48_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[32]">Reserved50_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[34]">Reserved52_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[35]">Reserved53_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[36]">Reserved54_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[3a]">Reserved58_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[3b]">Reserved59_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[45]">Reserved69_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[46]">Reserved70_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[47]">Reserved71_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[48]">Reserved72_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[51]">Reserved81_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[52]">Reserved82_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[53]">Reserved83_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[56]">Reserved86_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[57]">Reserved87_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[58]">Reserved88_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[59]">Reserved89_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[5a]">Reserved90_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[5b]">Reserved91_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[5c]">Reserved92_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[5d]">Reserved93_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[63]">Reserved99_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[6]">Reset_Handler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[49]">SCG_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[c]">SVC_Handler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[50]">SWI_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[f]">SysTick_Handler</a> from osif_baremetal.o(i.SysTick_Handler) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[1]">SystemInit</a> from system_s32k144.o(i.SystemInit) referenced from startup_s32k144.o(.text)
 <LI><a href="#[b]">UsageFault_Handler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[26]">WDOG_EWM_IRQHandler</a> from startup_s32k144.o(.text) referenced from startup_s32k144.o(RESET)
 <LI><a href="#[3]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_s32k144.o(.text)
 <LI><a href="#[5]">_snputc</a> from printf8.o(i._snputc) referenced from printf8.o(i.__0snprintf$8)
 <LI><a href="#[4]">fputc</a> from s32k.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[2]">init_data_bss</a> from startup.o(i.init_data_bss) referenced from startup_s32k144.o(.text)
 <LI><a href="#[0]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(.text)
</UL>
<P><STRONG><a name="[e3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[8c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[91]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[e5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[e6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[e7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[e8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>ERM_double_fault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ERM_single_fault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>FLEXIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>FTFC_Fault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>FTFC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>FTM0_Ch0_Ch1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>FTM0_Ch2_Ch3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>FTM0_Ch4_Ch5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>FTM0_Ch6_Ch7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>FTM0_Fault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>FTM0_Ovf_Reload_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>FTM1_Ch0_Ch1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>FTM1_Ch2_Ch3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>FTM1_Ch4_Ch5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>FTM1_Ch6_Ch7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>FTM1_Fault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>FTM1_Ovf_Reload_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>FTM2_Ch0_Ch1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>FTM2_Ch2_Ch3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>FTM2_Ch4_Ch5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>FTM2_Ch6_Ch7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>FTM2_Fault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>FTM2_Ovf_Reload_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>FTM3_Ch0_Ch1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>FTM3_Ch2_Ch3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>FTM3_Ch4_Ch5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>FTM3_Ch6_Ch7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>FTM3_Fault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>FTM3_Ovf_Reload_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>LPIT0_Ch0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>LPIT0_Ch1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>LPIT0_Ch2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>LPIT0_Ch3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>LPSPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>LPSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>LPSPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>LPTMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>LPUART0_RxTx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>LPUART1_RxTx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>LPUART2_RxTx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>MCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>PDB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>PDB1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>PORTA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>PORTB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>PORTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>PORTD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>PORTE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>RCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Read_Collision_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>Reserved100_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>Reserved103_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>Reserved105_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>Reserved106_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>Reserved107_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>Reserved110_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>Reserved112_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>Reserved113_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>Reserved114_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>Reserved45_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>Reserved46_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>Reserved48_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>Reserved50_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>Reserved52_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>Reserved53_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>Reserved54_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>Reserved58_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>Reserved59_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>Reserved69_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>Reserved70_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>Reserved71_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>Reserved72_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>Reserved81_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>Reserved82_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>Reserved83_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>Reserved86_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>Reserved87_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>Reserved88_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>Reserved89_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>Reserved90_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>Reserved91_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>Reserved92_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>Reserved93_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>Reserved99_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SWI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>WDOG_EWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k144.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8d]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[e9]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[ea]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[eb]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>CAN0_Error_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flexcan_irq.o(i.CAN0_Error_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = CAN0_Error_IRQHandler &rArr; FLEXCAN_IRQHandler &rArr; FLEXCAN_GetMsgBuff &rArr; FLEXCAN_GetMsgBuffRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>CAN0_ORed_0_15_MB_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flexcan_irq.o(i.CAN0_ORed_0_15_MB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = CAN0_ORed_0_15_MB_IRQHandler &rArr; FLEXCAN_IRQHandler &rArr; FLEXCAN_GetMsgBuff &rArr; FLEXCAN_GetMsgBuffRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CAN0_ORed_16_31_MB_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flexcan_irq.o(i.CAN0_ORed_16_31_MB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = CAN0_ORed_16_31_MB_IRQHandler &rArr; FLEXCAN_IRQHandler &rArr; FLEXCAN_GetMsgBuff &rArr; FLEXCAN_GetMsgBuffRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>CAN0_ORed_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flexcan_irq.o(i.CAN0_ORed_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = CAN0_ORed_IRQHandler &rArr; FLEXCAN_IRQHandler &rArr; FLEXCAN_GetMsgBuff &rArr; FLEXCAN_GetMsgBuffRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>CAN0_Wake_Up_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flexcan_irq.o(i.CAN0_Wake_Up_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAN0_Wake_Up_IRQHandler &rArr; FLEXCAN_WakeUpHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_WakeUpHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>CAN1_Error_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flexcan_irq.o(i.CAN1_Error_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = CAN1_Error_IRQHandler &rArr; FLEXCAN_IRQHandler &rArr; FLEXCAN_GetMsgBuff &rArr; FLEXCAN_GetMsgBuffRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>CAN1_ORed_0_15_MB_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flexcan_irq.o(i.CAN1_ORed_0_15_MB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = CAN1_ORed_0_15_MB_IRQHandler &rArr; FLEXCAN_IRQHandler &rArr; FLEXCAN_GetMsgBuff &rArr; FLEXCAN_GetMsgBuffRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>CAN1_ORed_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flexcan_irq.o(i.CAN1_ORed_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = CAN1_ORed_IRQHandler &rArr; FLEXCAN_IRQHandler &rArr; FLEXCAN_GetMsgBuff &rArr; FLEXCAN_GetMsgBuffRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>CAN2_Error_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flexcan_irq.o(i.CAN2_Error_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = CAN2_Error_IRQHandler &rArr; FLEXCAN_IRQHandler &rArr; FLEXCAN_GetMsgBuff &rArr; FLEXCAN_GetMsgBuffRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>CAN2_ORed_0_15_MB_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flexcan_irq.o(i.CAN2_ORed_0_15_MB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = CAN2_ORed_0_15_MB_IRQHandler &rArr; FLEXCAN_IRQHandler &rArr; FLEXCAN_GetMsgBuff &rArr; FLEXCAN_GetMsgBuffRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>CAN2_ORed_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flexcan_irq.o(i.CAN2_ORed_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = CAN2_ORed_IRQHandler &rArr; FLEXCAN_IRQHandler &rArr; FLEXCAN_GetMsgBuff &rArr; FLEXCAN_GetMsgBuffRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>CLOCK_SYS_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, clock_manager.o(i.CLOCK_SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SYS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[a0]"></a>CLOCK_SYS_SetConfiguration</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, clock_s32k1xx.o(i.CLOCK_SYS_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CLOCK_SYS_SetConfiguration &rArr; CLOCK_SYS_SetScgConfiguration &rArr; CLOCK_SYS_ConfigureModulesFromScg &rArr; CLOCK_SYS_TransitionSystemClock &rArr; CLOCK_SYS_SetSystemClockConfig &rArr; CLOCK_SYS_GetSysPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetSimConfiguration
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetScgConfiguration
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetPmcConfiguration
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetPccConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_UpdateConfiguration
</UL>

<P><STRONG><a name="[a2]"></a>CLOCK_SYS_SetPccConfiguration</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, clock_s32k1xx.o(i.CLOCK_SYS_SetPccConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLOCK_SYS_SetPccConfiguration &rArr; PCC_SetPeripheralClockControl
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCC_SetPeripheralClockControl
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCC_SetClockMode
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetConfiguration
</UL>

<P><STRONG><a name="[a4]"></a>CLOCK_SYS_SetPmcConfiguration</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, clock_s32k1xx.o(i.CLOCK_SYS_SetPmcConfiguration))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetConfiguration
</UL>

<P><STRONG><a name="[a1]"></a>CLOCK_SYS_SetScgConfiguration</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, clock_s32k1xx.o(i.CLOCK_SYS_SetScgConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CLOCK_SYS_SetScgConfiguration &rArr; CLOCK_SYS_ConfigureModulesFromScg &rArr; CLOCK_SYS_TransitionSystemClock &rArr; CLOCK_SYS_SetSystemClockConfig &rArr; CLOCK_SYS_GetSysPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_TransitionSystemClock
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetSystemClockConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFircFreq
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureModulesFromScg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureFIRC
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetConfiguration
</UL>

<P><STRONG><a name="[a3]"></a>CLOCK_SYS_SetSimConfiguration</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, clock_s32k1xx.o(i.CLOCK_SYS_SetSimConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CLOCK_SYS_SetSimConfiguration &rArr; SIM_SetLpoClocks
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_SetLpoClocks
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetConfiguration
</UL>

<P><STRONG><a name="[a9]"></a>CLOCK_SYS_UpdateConfiguration</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, clock_manager.o(i.CLOCK_SYS_UpdateConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CLOCK_SYS_UpdateConfiguration &rArr; CLOCK_SYS_SetConfiguration &rArr; CLOCK_SYS_SetScgConfiguration &rArr; CLOCK_SYS_ConfigureModulesFromScg &rArr; CLOCK_SYS_TransitionSystemClock &rArr; CLOCK_SYS_SetSystemClockConfig &rArr; CLOCK_SYS_GetSysPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetConfiguration
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQGlobal
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQGlobal
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[10]"></a>DMA0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, edma_irq.o(i.DMA0_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA10_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, edma_irq.o(i.DMA10_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA11_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, edma_irq.o(i.DMA11_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA12_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, edma_irq.o(i.DMA12_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA13_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, edma_irq.o(i.DMA13_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA14_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, edma_irq.o(i.DMA14_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA15_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, edma_irq.o(i.DMA15_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, edma_irq.o(i.DMA1_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, edma_irq.o(i.DMA2_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, edma_irq.o(i.DMA3_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, edma_irq.o(i.DMA4_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, edma_irq.o(i.DMA5_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA6_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, edma_irq.o(i.DMA6_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA7_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, edma_irq.o(i.DMA7_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA8_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, edma_irq.o(i.DMA8_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA9_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, edma_irq.o(i.DMA9_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA_Error_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, edma_irq.o(i.DMA_Error_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_Error_IRQHandler &rArr; EDMA_DRV_ErrorIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ErrorIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>EDMA_DRV_ConfigMultiBlockTransfer</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, edma_driver.o(i.EDMA_DRV_ConfigMultiBlockTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EDMA_DRV_ConfigMultiBlockTransfer &rArr; EDMA_DRV_ConfigSingleBlockTransfer &rArr; EDMA_TCDSetAttribute
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_TCDSetDisableDmaRequestAfterTCDDoneCmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_TCDSetMajorCount
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ConfigSingleBlockTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_ConfigureDmaTransfer
</UL>

<P><STRONG><a name="[af]"></a>EDMA_DRV_ConfigSingleBlockTransfer</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, edma_driver.o(i.EDMA_DRV_ConfigSingleBlockTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = EDMA_DRV_ConfigSingleBlockTransfer &rArr; EDMA_TCDSetAttribute
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_TCDSetMajorCompleteIntCmd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_TCDSetNbytes
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_TCDSetMajorCount
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_TCDSetAttribute
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_TCDClearReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ConfigMultiBlockTransfer
</UL>

<P><STRONG><a name="[ad]"></a>EDMA_DRV_ErrorIRQHandler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, edma_driver.o(i.EDMA_DRV_ErrorIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EDMA_DRV_ErrorIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetDmaRequestCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Error_IRQHandler
</UL>

<P><STRONG><a name="[ac]"></a>EDMA_DRV_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, edma_driver.o(i.EDMA_DRV_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA9_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA8_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA7_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA6_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA5_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA4_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA3_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA15_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA14_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA13_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA12_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA11_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_IRQHandler
</UL>

<P><STRONG><a name="[cb]"></a>EDMA_DRV_SetChannelRequest</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, edma_driver.o(i.EDMA_DRV_SetChannelRequest))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_ConfigureDmaTransfer
</UL>

<P><STRONG><a name="[d8]"></a>EDMA_DRV_SetSrcLastAddrAdjustment</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, edma_driver.o(i.EDMA_DRV_SetSrcLastAddrAdjustment))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_SlaveStartDmaTransfer
</UL>

<P><STRONG><a name="[b7]"></a>EDMA_DRV_StartChannel</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, edma_driver.o(i.EDMA_DRV_StartChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EDMA_DRV_StartChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetDmaRequestCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_SlaveStartDmaTransfer
</UL>

<P><STRONG><a name="[b8]"></a>EDMA_DRV_StopChannel</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, edma_driver.o(i.EDMA_DRV_StopChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EDMA_DRV_StopChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetDmaRequestCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_CompleteRxMessageFifoData
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_SlaveIRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>EDMA_SetDmaRequestCmd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, edma_hw_access.o(i.EDMA_SetDmaRequestCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_StopChannel
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_StartChannel
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ErrorIRQHandler
</UL>

<P><STRONG><a name="[b2]"></a>EDMA_TCDClearReg</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, edma_hw_access.o(i.EDMA_TCDClearReg))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ConfigSingleBlockTransfer
</UL>

<P><STRONG><a name="[b3]"></a>EDMA_TCDSetAttribute</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, edma_hw_access.o(i.EDMA_TCDSetAttribute))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EDMA_TCDSetAttribute
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ConfigSingleBlockTransfer
</UL>

<P><STRONG><a name="[b0]"></a>EDMA_TCDSetMajorCount</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, edma_hw_access.o(i.EDMA_TCDSetMajorCount))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ConfigSingleBlockTransfer
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ConfigMultiBlockTransfer
</UL>

<P><STRONG><a name="[b4]"></a>EDMA_TCDSetNbytes</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, edma_hw_access.o(i.EDMA_TCDSetNbytes))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ConfigSingleBlockTransfer
</UL>

<P><STRONG><a name="[c7]"></a>FLEXCAN_ClearErrIntStatusFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, flexcan_hw_access.o(i.FLEXCAN_ClearErrIntStatusFlag))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>FLEXCAN_GetMsgBuff</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, flexcan_hw_access.o(i.FLEXCAN_GetMsgBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FLEXCAN_GetMsgBuff &rArr; FLEXCAN_GetMsgBuffRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetMsgBuffRegion
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ComputePayloadSize
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IRQHandler
</UL>

<P><STRONG><a name="[c1]"></a>FLEXCAN_GetPayloadSize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, flexcan_hw_access.o(i.FLEXCAN_GetPayloadSize))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetMsgBuffRegion
</UL>

<P><STRONG><a name="[92]"></a>FLEXCAN_IRQHandler</STRONG> (Thumb, 300 bytes, Stack size 104 bytes, flexcan_driver.o(i.FLEXCAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = FLEXCAN_IRQHandler &rArr; FLEXCAN_GetMsgBuff &rArr; FLEXCAN_GetMsgBuffRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetMsgBuffIntStatusFlag
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_CompleteTransfer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_CompleteRxMessageFifoData
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ClearMsgBuffIntStatusFlag
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ReadRxFifo
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_LockRxMsgBuff
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetMsgBuff
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ClearErrIntStatusFlag
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_ORed_IRQHandler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_ORed_0_15_MB_IRQHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Error_IRQHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_ORed_IRQHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_ORed_0_15_MB_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Error_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_ORed_IRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_ORed_16_31_MB_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_ORed_0_15_MB_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Error_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>FLEXCAN_LockRxMsgBuff</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, flexcan_hw_access.o(i.FLEXCAN_LockRxMsgBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FLEXCAN_LockRxMsgBuff &rArr; FLEXCAN_GetMsgBuffRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetMsgBuffRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IRQHandler
</UL>

<P><STRONG><a name="[c4]"></a>FLEXCAN_ReadRxFifo</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, flexcan_hw_access.o(i.FLEXCAN_ReadRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLEXCAN_ReadRxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ComputePayloadSize
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>FLEXCAN_SetErrIntCmd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, flexcan_hw_access.o(i.FLEXCAN_SetErrIntCmd))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_CompleteTransfer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_CompleteRxMessageFifoData
</UL>

<P><STRONG><a name="[bb]"></a>FLEXCAN_SetMsgBuffIntCmd</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, flexcan_hw_access.o(i.FLEXCAN_SetMsgBuffIntCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLEXCAN_SetMsgBuffIntCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_CompleteTransfer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_CompleteRxMessageFifoData
</UL>

<P><STRONG><a name="[93]"></a>FLEXCAN_WakeUpHandler</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, flexcan_driver.o(i.FLEXCAN_WakeUpHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FLEXCAN_WakeUpHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Wake_Up_IRQHandler
</UL>

<P><STRONG><a name="[aa]"></a>INT_SYS_DisableIRQGlobal</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, interrupt_manager.o(i.INT_SYS_DisableIRQGlobal))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_UpdateConfiguration
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DI
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_SemaPost
</UL>

<P><STRONG><a name="[ab]"></a>INT_SYS_EnableIRQGlobal</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, interrupt_manager.o(i.INT_SYS_EnableIRQGlobal))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_UpdateConfiguration
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EI
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_SemaPost
</UL>

<P><STRONG><a name="[9e]"></a>IO_Write</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, s32k.o(i.IO_Write))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureSOSC
</UL>

<P><STRONG><a name="[28]"></a>LPI2C0_Master_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpi2c_irq.o(i.LPI2C0_Master_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LPI2C0_Master_IRQHandler &rArr; LPI2C_DRV_MasterIRQHandler &rArr; LPI2C_DRV_MasterHandleTransmitDataRequest &rArr; LPI2C_DRV_MasterQueueData
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_MasterIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>LPI2C0_Slave_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpi2c_irq.o(i.LPI2C0_Slave_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = LPI2C0_Slave_IRQHandler &rArr; LPI2C_DRV_SlaveIRQHandler &rArr; LPI2C_DRV_SlaveHandleAddressValidEvent &rArr; LPI2C_DRV_SlaveStartDmaTransfer &rArr; LPI2C_DRV_ConfigureDmaTransfer &rArr; EDMA_DRV_ConfigMultiBlockTransfer &rArr; EDMA_DRV_ConfigSingleBlockTransfer &rArr; EDMA_TCDSetAttribute
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_SlaveIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>LPI2C_DRV_MasterIRQHandler</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, lpi2c_driver.o(i.LPI2C_DRV_MasterIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LPI2C_DRV_MasterIRQHandler &rArr; LPI2C_DRV_MasterHandleTransmitDataRequest &rArr; LPI2C_DRV_MasterQueueData
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_SemaPost
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_MasterHandleTransmitDataRequest
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_MasterHandleReceiveDataReadyEvent
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_MasterEndTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C0_Master_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>LPI2C_DRV_SlaveIRQHandler</STRONG> (Thumb, 488 bytes, Stack size 24 bytes, lpi2c_driver.o(i.LPI2C_DRV_SlaveIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = LPI2C_DRV_SlaveIRQHandler &rArr; LPI2C_DRV_SlaveHandleAddressValidEvent &rArr; LPI2C_DRV_SlaveStartDmaTransfer &rArr; LPI2C_DRV_ConfigureDmaTransfer &rArr; EDMA_DRV_ConfigMultiBlockTransfer &rArr; EDMA_DRV_ConfigSingleBlockTransfer &rArr; EDMA_TCDSetAttribute
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_SemaPost
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_Set_SlaveInt
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_Get_SlaveInt
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_SlaveHandleAddressValidEvent
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_SlaveEndTransfer
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_StopChannel
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C0_Slave_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>OSIF_SemaPost</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, osif_baremetal.o(i.OSIF_SemaPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSIF_SemaPost
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQGlobal
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQGlobal
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_CompleteTransfer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_CompleteRxMessageFifoData
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_SlaveIRQHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_MasterIRQHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_MasterHandleTransmitDataRequest
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_MasterHandleReceiveDataReadyEvent
</UL>

<P><STRONG><a name="[f]"></a>SysTick_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, osif_baremetal.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>SystemInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_s32k144.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>_DI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, s32k.o(i._DI))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQGlobal
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>_EI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, s32k.o(i._EI))
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQGlobal
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ec]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[c3]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_SlaveIRQHandler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_WakeUpHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>__0snprintf$8</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ed]"></a>__1snprintf$8</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)

<P><STRONG><a name="[e0]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[ee]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[ef]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[f0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[4]"></a>fputc</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, s32k.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fputc &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[2]"></a>init_data_bss</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, startup.o(i.init_data_bss))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = init_data_bss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k144.o(.text)
</UL>
<P><STRONG><a name="[0]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = main &rArr; sysinit &rArr; CLOCK_SYS_UpdateConfiguration &rArr; CLOCK_SYS_SetConfiguration &rArr; CLOCK_SYS_SetScgConfiguration &rArr; CLOCK_SYS_ConfigureModulesFromScg &rArr; CLOCK_SYS_TransitionSystemClock &rArr; CLOCK_SYS_SetSystemClockConfig &rArr; CLOCK_SYS_GetSysPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EI
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[e1]"></a>sysinit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timer.o(i.sysinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sysinit &rArr; CLOCK_SYS_UpdateConfiguration &rArr; CLOCK_SYS_SetConfiguration &rArr; CLOCK_SYS_SetScgConfiguration &rArr; CLOCK_SYS_ConfigureModulesFromScg &rArr; CLOCK_SYS_TransitionSystemClock &rArr; CLOCK_SYS_SetSystemClockConfig &rArr; CLOCK_SYS_GetSysPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_UpdateConfiguration
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[94]"></a>CLOCK_SYS_ConfigureFIRC</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, clock_s32k1xx.o(i.CLOCK_SYS_ConfigureFIRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOCK_SYS_ConfigureFIRC
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFircFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureModulesFromScg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetScgConfiguration
</UL>

<P><STRONG><a name="[96]"></a>CLOCK_SYS_ConfigureModulesFromScg</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, clock_s32k1xx.o(i.CLOCK_SYS_ConfigureModulesFromScg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CLOCK_SYS_ConfigureModulesFromScg &rArr; CLOCK_SYS_TransitionSystemClock &rArr; CLOCK_SYS_SetSystemClockConfig &rArr; CLOCK_SYS_GetSysPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_TransitionSystemClock
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetCurrentRunMode
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureSPLL
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureSOSC
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureSIRC
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureFIRC
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetScgConfiguration
</UL>

<P><STRONG><a name="[97]"></a>CLOCK_SYS_ConfigureSIRC</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, clock_s32k1xx.o(i.CLOCK_SYS_ConfigureSIRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOCK_SYS_ConfigureSIRC
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSircFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureModulesFromScg
</UL>

<P><STRONG><a name="[98]"></a>CLOCK_SYS_ConfigureSOSC</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, clock_s32k1xx.o(i.CLOCK_SYS_ConfigureSOSC))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLOCK_SYS_ConfigureSOSC
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSysOscFreq
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureModulesFromScg
</UL>

<P><STRONG><a name="[99]"></a>CLOCK_SYS_ConfigureSPLL</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, clock_s32k1xx.o(i.CLOCK_SYS_ConfigureSPLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLOCK_SYS_ConfigureSPLL &rArr; CLOCK_SYS_GetSysPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSysPllFreq
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSysOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureModulesFromScg
</UL>

<P><STRONG><a name="[9a]"></a>CLOCK_SYS_GetCurrentRunMode</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, clock_s32k1xx.o(i.CLOCK_SYS_GetCurrentRunMode))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_TransitionSystemClock
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureModulesFromScg
</UL>

<P><STRONG><a name="[95]"></a>CLOCK_SYS_GetFircFreq</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, clock_s32k1xx.o(i.CLOCK_SYS_GetFircFreq))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetSystemClockConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureFIRC
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetScgConfiguration
</UL>

<P><STRONG><a name="[9c]"></a>CLOCK_SYS_GetSircFreq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, clock_s32k1xx.o(i.CLOCK_SYS_GetSircFreq))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetSystemClockConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureSIRC
</UL>

<P><STRONG><a name="[9d]"></a>CLOCK_SYS_GetSysOscFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, clock_s32k1xx.o(i.CLOCK_SYS_GetSysOscFreq))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetSystemClockConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSysPllFreq
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureSPLL
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureSOSC
</UL>

<P><STRONG><a name="[9f]"></a>CLOCK_SYS_GetSysPllFreq</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, clock_s32k1xx.o(i.CLOCK_SYS_GetSysPllFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SYS_GetSysPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSysOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetSystemClockConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureSPLL
</UL>

<P><STRONG><a name="[a7]"></a>CLOCK_SYS_SetSystemClockConfig</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, clock_s32k1xx.o(i.CLOCK_SYS_SetSystemClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLOCK_SYS_SetSystemClockConfig &rArr; CLOCK_SYS_GetSysPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSysPllFreq
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSysOscFreq
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSircFreq
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFircFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_TransitionSystemClock
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetScgConfiguration
</UL>

<P><STRONG><a name="[9b]"></a>CLOCK_SYS_TransitionSystemClock</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, clock_s32k1xx.o(i.CLOCK_SYS_TransitionSystemClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLOCK_SYS_TransitionSystemClock &rArr; CLOCK_SYS_SetSystemClockConfig &rArr; CLOCK_SYS_GetSysPllFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetSystemClockConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetCurrentRunMode
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureModulesFromScg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetScgConfiguration
</UL>

<P><STRONG><a name="[a5]"></a>PCC_SetClockMode</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, clock_s32k1xx.o(i.PCC_SetClockMode))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetPccConfiguration
</UL>

<P><STRONG><a name="[a6]"></a>PCC_SetPeripheralClockControl</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, clock_s32k1xx.o(i.PCC_SetPeripheralClockControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PCC_SetPeripheralClockControl
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetPccConfiguration
</UL>

<P><STRONG><a name="[a8]"></a>SIM_SetLpoClocks</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, clock_s32k1xx.o(i.SIM_SetLpoClocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SIM_SetLpoClocks
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetSimConfiguration
</UL>

<P><STRONG><a name="[b1]"></a>EDMA_TCDSetDisableDmaRequestAfterTCDDoneCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, edma_driver.o(i.EDMA_TCDSetDisableDmaRequestAfterTCDDoneCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ConfigMultiBlockTransfer
</UL>

<P><STRONG><a name="[b5]"></a>EDMA_TCDSetMajorCompleteIntCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, edma_driver.o(i.EDMA_TCDSetMajorCompleteIntCmd))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ConfigSingleBlockTransfer
</UL>

<P><STRONG><a name="[ca]"></a>LPI2C_DRV_ConfigureDmaTransfer</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, lpi2c_driver.o(i.LPI2C_DRV_ConfigureDmaTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = LPI2C_DRV_ConfigureDmaTransfer &rArr; EDMA_DRV_ConfigMultiBlockTransfer &rArr; EDMA_DRV_ConfigSingleBlockTransfer &rArr; EDMA_TCDSetAttribute
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_SetChannelRequest
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ConfigMultiBlockTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_SlaveStartDmaTransfer
</UL>

<P><STRONG><a name="[d0]"></a>LPI2C_DRV_MasterCmdQueueEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpi2c_driver.o(i.LPI2C_DRV_MasterCmdQueueEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_MasterQueueData
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_MasterHandleTransmitDataRequest
</UL>

<P><STRONG><a name="[cc]"></a>LPI2C_DRV_MasterEndTransfer</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lpi2c_driver.o(i.LPI2C_DRV_MasterEndTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C_DRV_MasterEndTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_Set_MasterInt
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_MasterIRQHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_MasterHandleTransmitDataRequest
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_MasterHandleReceiveDataReadyEvent
</UL>

<P><STRONG><a name="[ce]"></a>LPI2C_DRV_MasterHandleReceiveDataReadyEvent</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, lpi2c_driver.o(i.LPI2C_DRV_MasterHandleReceiveDataReadyEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPI2C_DRV_MasterHandleReceiveDataReadyEvent &rArr; LPI2C_DRV_MasterEndTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_SemaPost
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_MasterEndTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_MasterIRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>LPI2C_DRV_MasterHandleTransmitDataRequest</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, lpi2c_driver.o(i.LPI2C_DRV_MasterHandleTransmitDataRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LPI2C_DRV_MasterHandleTransmitDataRequest &rArr; LPI2C_DRV_MasterQueueData
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_SemaPost
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_Set_MasterInt
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_Get_MasterTxFIFOSize
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_MasterQueueData
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_MasterEndTransfer
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_MasterCmdQueueEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_MasterIRQHandler
</UL>

<P><STRONG><a name="[d1]"></a>LPI2C_DRV_MasterQueueData</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lpi2c_driver.o(i.LPI2C_DRV_MasterQueueData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C_DRV_MasterQueueData
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_Get_MasterTxFIFOSize
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_MasterCmdQueueEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_MasterHandleTransmitDataRequest
</UL>

<P><STRONG><a name="[d3]"></a>LPI2C_DRV_SlaveEndTransfer</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lpi2c_driver.o(i.LPI2C_DRV_SlaveEndTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPI2C_DRV_SlaveEndTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_Set_SlaveInt
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_SlaveIRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>LPI2C_DRV_SlaveHandleAddressValidEvent</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lpi2c_driver.o(i.LPI2C_DRV_SlaveHandleAddressValidEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = LPI2C_DRV_SlaveHandleAddressValidEvent &rArr; LPI2C_DRV_SlaveStartDmaTransfer &rArr; LPI2C_DRV_ConfigureDmaTransfer &rArr; EDMA_DRV_ConfigMultiBlockTransfer &rArr; EDMA_DRV_ConfigSingleBlockTransfer &rArr; EDMA_TCDSetAttribute
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_Set_SlaveInt
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_SlaveStartDmaTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_SlaveIRQHandler
</UL>

<P><STRONG><a name="[d6]"></a>LPI2C_DRV_SlaveStartDmaTransfer</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, lpi2c_driver.o(i.LPI2C_DRV_SlaveStartDmaTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = LPI2C_DRV_SlaveStartDmaTransfer &rArr; LPI2C_DRV_ConfigureDmaTransfer &rArr; EDMA_DRV_ConfigMultiBlockTransfer &rArr; EDMA_DRV_ConfigSingleBlockTransfer &rArr; EDMA_TCDSetAttribute
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_ConfigureDmaTransfer
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_StartChannel
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_SetSrcLastAddrAdjustment
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_SlaveHandleAddressValidEvent
</UL>

<P><STRONG><a name="[d2]"></a>LPI2C_Get_MasterTxFIFOSize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpi2c_driver.o(i.LPI2C_Get_MasterTxFIFOSize))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_MasterQueueData
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_MasterHandleTransmitDataRequest
</UL>

<P><STRONG><a name="[d7]"></a>LPI2C_Get_SlaveInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpi2c_driver.o(i.LPI2C_Get_SlaveInt))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_SlaveIRQHandler
</UL>

<P><STRONG><a name="[cd]"></a>LPI2C_Set_MasterInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpi2c_driver.o(i.LPI2C_Set_MasterInt))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_MasterHandleTransmitDataRequest
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_MasterEndTransfer
</UL>

<P><STRONG><a name="[d4]"></a>LPI2C_Set_SlaveInt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpi2c_driver.o(i.LPI2C_Set_SlaveInt))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_SlaveIRQHandler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_SlaveHandleAddressValidEvent
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_DRV_SlaveEndTransfer
</UL>

<P><STRONG><a name="[c5]"></a>FLEXCAN_ClearMsgBuffIntStatusFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, flexcan_driver.o(i.FLEXCAN_ClearMsgBuffIntStatusFlag))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IRQHandler
</UL>

<P><STRONG><a name="[b9]"></a>FLEXCAN_CompleteRxMessageFifoData</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, flexcan_driver.o(i.FLEXCAN_CompleteRxMessageFifoData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLEXCAN_CompleteRxMessageFifoData &rArr; OSIF_SemaPost
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_SemaPost
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_StopChannel
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetMsgBuffIntCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetErrIntCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>FLEXCAN_CompleteTransfer</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, flexcan_driver.o(i.FLEXCAN_CompleteTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLEXCAN_CompleteTransfer &rArr; OSIF_SemaPost
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_SemaPost
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetMsgBuffIntCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetErrIntCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IRQHandler
</UL>

<P><STRONG><a name="[c2]"></a>FLEXCAN_GetMsgBuffIntStatusFlag</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, flexcan_driver.o(i.FLEXCAN_GetMsgBuffIntStatusFlag))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IRQHandler
</UL>

<P><STRONG><a name="[c0]"></a>FLEXCAN_ComputePayloadSize</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, flexcan_hw_access.o(i.FLEXCAN_ComputePayloadSize))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ReadRxFifo
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetMsgBuff
</UL>

<P><STRONG><a name="[bf]"></a>FLEXCAN_GetMsgBuffRegion</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, flexcan_hw_access.o(i.FLEXCAN_GetMsgBuffRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLEXCAN_GetMsgBuffRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetPayloadSize
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_LockRxMsgBuff
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetMsgBuff
</UL>

<P><STRONG><a name="[dc]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf$8
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[df]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[de]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf8.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0snprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
